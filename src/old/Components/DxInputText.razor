@implements IDisposable
@using System.Linq.Expressions
@inherits InputBase<string>


@if (ShowIf)
{
    <div class='w-full @CssClass'>
        @if (!string.IsNullOrWhiteSpace(Label))
        {
            <label class="font-medium text-slate-400 mb-1" for=@Id>
                @Label
            </label>
        }

        <div class="relative block w-full">
            <input
                id=@Id
                @bind=@CurrentValue
                placeholder=@Placeholder
                disabled=@(!Enabled || forceDisabled)
                type='@(IsPassword && !showPassword ? "password" : "text")'
                class=
                '
                    relative w-full rounded-md border 
                    bg-white dark:bg-slate-800
                    text-slate-700 dark:text-slate-300
                    placeholder:text-slate-300 dark:placeholder:text-slate-600
                    disabled:pointer-events-none disabled:opacity-50 dark:disabled:opacity-40
                    dxinput @InnerClass
                    @(
                        Size switch
                        {
                            var x when x == Sizes.Small => "text-sm px-3 py-1",
                            var x when x == Sizes.Medium => "text-base px-4 py-2",
                            var x when x == Sizes.Large => "text-lg px-5 py-2",
                            _ => throw new ArgumentException($"Invalid size {Size}")
                        }
                    )
                    @(
                        CssClass.Contains("invalid") ? " invalid " :
                        CssClass.Contains("valid") ? " valid " :
                        " idle "
                    )
                '
                @onkeypress=
                '@(
                    async e =>
                    {
                        if (e.Key != "Enter" || !OnEnterKeyPress.HasDelegate) return;
                        await OnEnterKeyPress.InvokeAsync();
                    }
                )'
            />

            @if (IsPassword)
            {
                <div class="absolute top-0 right-0 mr-4 h-full flex items-center">
                    <button @onclick=@(() => showPassword = !showPassword) type="button" tabindex="-1">
                        <i class='@(showPassword ? "icon-rr-eye-crossed" : "icon-rr-eye") text-lg text-gray-500 dark:text-gray-400'></i>
                    </button>
                </div>
            }
        </div>

        @if (ValidationFor is not null)
        {
            <span class="text-danger-500 dark:text-danger-400 text-sm">
                <ValidationMessage For="@ValidationFor" />
            </span>
        }
    </div>
}


@code
{
    string errorMessage = string.Empty;
    bool showPassword;
    bool forceDisabled;

    public sealed class Sizes : SmartEnum<Sizes, byte>
    {
        public static readonly Sizes Small = new(0, nameof(Small));
        public static readonly Sizes Medium = new(1, nameof(Medium));
        public static readonly Sizes Large = new(2, nameof(Large));

        private Sizes(byte value, string name) : base(name, value) {}
    }

    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public bool IsPassword { get; set; }
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public bool Enabled { get; set; } = true;
    [Parameter] public Sizes Size { get; set; } = Sizes.Medium;
    [Parameter] public EventCallback OnEnterKeyPress { get; set; }
    [Parameter] public bool ShowIf { get; set; } = true;
    [Parameter] public string InnerClass { get; set; } = string.Empty;
    [Parameter] public string Id { get; set; } = string.Empty;

    protected override bool TryParseValueFromString(string? value, out string result, out string validationErrorMessage)
    {
        result = value ?? string.Empty;
        validationErrorMessage = string.Empty;
        return true;
    }

    protected override void OnInitialized()
    {
        EditContext.SetFieldCssClassProvider(new CssClassProvider());

        if (ParentCard != null)
        {
            ParentCard.OnStateChanged += OnParentCardStateChanged;
        }
    }

    void OnParentCardStateChanged(object? s, DxCard.DxCardState state)
    {
        forceDisabled = state.Disabled;
    }

    public void Dispose()
    {
        if (ParentCard != null)
            ParentCard.OnStateChanged -= OnParentCardStateChanged;
    }

    class CssClassProvider : FieldCssClassProvider
    {
        public override string GetFieldCssClass(EditContext editContext, in FieldIdentifier fieldIdentifier)
        {
            if (editContext.GetValidationMessages(fieldIdentifier).Any())
                return "invalid";

            if (editContext.IsModified(fieldIdentifier))
                return "valid";

            return "idle";
        }
    }

    [Parameter] public Expression<Func<string>>? ValidationFor { get; set; } = null;
    [CascadingParameter] public DxCard? ParentCard { get; set; } = null;
}